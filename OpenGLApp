#include <stdio.h>
#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#define ASSERT(x) if(!(x))__debugbreak();
#define GLCall(x) GLClearError();\
    x;\
    ASSERT(GLLogCall(#x, __FILE__, __LINE__))

static void GLClearError() 
{
    while (glGetError() != GL_NO_ERROR);
}

struct ShaderProgramSource
{
    std::string VertexSource;
    std::string FragmentSource;
};

static bool GLLogCall(const char* function, const char* file, int line)
{
    while (GLenum error = glGetError())
    {
        std::cout << "[OpenGL Error] (" << error << ")" << function << ""
            << file << ":"<< line << std::endl;
        return false;
    }

    return true;
}

static ShaderProgramSource ParseShader(const std::string& filepath)
{
    std::ifstream stream(filepath);
    std::string line;
    std::stringstream ss[2];// 0 =vertex shader 1 = fragment shader

    enum class ShaderType
    {
        NONE = -1, VERTEX = 0, FRAGMENT = 1

    };

    ShaderType type = ShaderType::NONE;

    while (getline(stream, line))
    {
        if (line.find("#shader") != std::string::npos)
        {
            if (line.find("vertex") != std::string::npos)
            {
                //set mode to vertex
                type = ShaderType::VERTEX;

            }
            else if (line.find("fragment") != std::string::npos)
            {
                //Set mode to fragment 
                type = ShaderType::FRAGMENT;
            }
        }
        else
        {
            ss[(int)type] << line << '\n';
        }
    }

    //Debugging purposes 

   
    return { ss[0].str(), ss[1].str() };
}

static unsigned int CompileShader(unsigned int type, const std::string& source)
{
    unsigned int id = (glCreateShader(type));
    const char* src = source.c_str();
    GLCall(glShaderSource(id, 1, &src, nullptr));
   GLCall(glCompileShader(id));

    //ERROR HANDLING 
    int result;
   GLCall( glGetShaderiv(id, GL_COMPILE_STATUS, &result));
    if (result == GL_FALSE)
    {
        int length;
        GLCall(glGetShaderiv(id, GL_INFO_LOG_LENGTH, &length));
        char* message = (char*)alloca(length * sizeof(char));
        GLCall(glGetShaderInfoLog(id, length, &length, message));
        std::cout << "Failed to compile: " << (type == GL_VERTEX_SHADER ? "vertex" : "fragment")<<
            std::endl;
        GLCall(glDeleteShader(id));
        return 0;
    }

    return id;
}


static unsigned int CreateShader(const std::string& vertexShader, const std::string& fragmentShader)
{
   unsigned int program = glCreateProgram();
   unsigned int vs = CompileShader(GL_VERTEX_SHADER, vertexShader); //Creates the vertex shader
   unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, fragmentShader); //Creates the fragment shader

   //attach shaders to program and vildates prgm
   GLCall(glAttachShader(program, vs));
   GLCall(glAttachShader(program, fs));
   GLCall(glLinkProgram(program));
   GLCall(glValidateProgram(program));

   //Delete our shaders and free up memory 
   GLCall(glDeleteShader(vs));
   GLCall(glDeleteShader(fs));

   return program;



}



int main(void)
{
    GLFWwindow* window;

    /* Initialize the library */
  if (!glfwInit())
        return -1;

  if(glewInit()  != GLEW_OK)
       std::cout << "Error!" << std::endl;

    /* Create a windowed mode window and its OpenGL context */
   window = glfwCreateWindow(640, 480, "Hello World", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }

    /* Make the window's context current */
    (glfwMakeContextCurrent(window));

    if (glewInit() != GLEW_OK)
        std::cout << "Error!" << std::endl;

    std::cout << glGetString(GL_VERSION) << std::endl;

    float positions[] = {
       -0.5f,-0.5f, //0
        0.5f,-0.5f,  //1
        0.5f, 0.5f, //2
       -0.5f, 0.5f  //3

    };

    unsigned int indices[]{
        0, 1, 2,
        2, 3, 0

    };

    unsigned int buffer;
    GLCall(glGenBuffers(1, &buffer));
    GLCall(glBindBuffer(GL_ARRAY_BUFFER, buffer));
    glBufferData(GL_ARRAY_BUFFER, 6 * 2 * sizeof(float), positions, GL_STATIC_DRAW);
    
    glEnableVertexAttribArray(0);
    GLCall(glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, 0));
    GLCall(glEnableVertexAttribArray(0));

    unsigned int ibo; //Index buffer object
    glGenBuffers(1, &ibo);
    GLCall(glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo));
    GLCall(glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(unsigned int), indices, GL_STATIC_DRAW));

    ShaderProgramSource source = ParseShader("res/shaders/Basic.shader");
    std::cout << "Vertex: " << std::endl;
    std::cout << source.VertexSource << std::endl;
    std::cout << "Fragment:" << std::endl;
    std::cout << source.FragmentSource << std::endl;
    
    //unsigned int shader = CreateShader(source.VertexSource, source.FragmentSource);
    //GLCall(glUseProgram(shader));

     //uniform vec4;


    GLCall(glBindBuffer(GL_ARRAY_BUFFER, 0));

   //std::string vertexShader =
     //   "#version 330 core\n"
       // "\n"
       //"layout(location = 0) in vec4 position;\n"
       // "\n"
        //"void main()\n"
        //"{\n"
        //"    gl_Position = position;\n"
        //"}\n";

  // std::string fragmentShader =
    //    "#version 330 core\n"
      //  "\n"
       // "layout(location = 0) out vec4 color;\n"
        //"\n"
        //"void main()\n"
        //"{\n"
        //"  color = vec4(0.2, 0.3, 0.8, 1.0);\n"
        //"}\n";

    //uniform vec4 u_Color;

    unsigned int shader = CreateShader(source.VertexSource, source.FragmentSource);//vertexShader, fragmentShader);
    GLCall(glUseProgram(shader));

   // GLCall(int location = glGetUniformLocation(shader, "u_Color"));
   // ASSERT(location != -1)
   // GLCall(glUniform4f(location, 0.2f, 0.3f, 0.8f, 1.0f));


    /* Loop until the user closes the window */
    while (!glfwWindowShouldClose(window))
    {
        /* Render here */
        GLCall(glClear(GL_COLOR_BUFFER_BIT));

        GLClearError();
       GLCall(glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, nullptr));
        //ASSERT(GLLogCall());

        glBegin(GL_TRIANGLES);
        glVertex2f(-0.5f,-0.5f);
        glVertex2f(0.0f,  0.5f);
        glVertex2f(0.5f, -0.5f);
        glEnd();

        /* Swap front and back buffers */
       GLCall(glfwSwapBuffers(window));

        /* Poll for and process events */
       GLCall(glfwPollEvents());
    }

    glDeleteProgram(shader);

    glfwTerminate();
    return 0;
}
